# 1. Database Connection

# 1-1) Connection URL
#spring.datasource.url=jdbc:mysql://localhost:3306/SPRING_MVC_EX?serverTimeZone=Asia/Seoul
spring.datasource.url=jdbc:mysql://localhost:3306/SPRING_MVC_EX_PRACTICE?serverTimeZone=Asia/Seoul&allowMultiQueries=true

# 1-2) Connection Username
spring.datasource.username=root

# 1-3) Connection Password
spring.datasource.password=1234

# 1-4) Connection Driver
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver



# 2. MyBatis Configuration

# 2-1) 매퍼(.xml) 파일위치 지정 (src/main/resources/mapper 하위 폴더)
mybatis.mapper-locations=classpath:/mapper/*.xml
# src/main/resources/mapper 하위 폴더만 매퍼로 인식하게 됨

# 2-2) 데이터 타입 alias가 매핑되는 패키지 지정
# 매핑 예시 1) com.application.mvc.data.ProductDTO > ProductDTO
# 매핑 예시 2) com.application.mvc.data.BrandDTO > BrandDTO
mybatis.type-aliases-package=com.application.mvc.practice1
# com.application.mvc 패키지 내의 모든 클래스가 MyBatis에 의해 별칭으로 등록

# 2-3) underscore 와 camel case 매핑 설정
# 매핑 예시 (DB Table) MEMBER_ID <> (java Object) memberId
#           (DT Table) USER_ROLE <> (java Object) userRole
mybatis.configuration.map-underscore-to-camel-case=true
# 이것 덕분에 jsp에서 했던 것처럼 필드네임 하나하나를 다 가져와서 작성하지 않아도 됨


# 3. Thymeleaf Configuration (이미 적용되어있다.)
# 3-1) view 파일 위치지정 (src/main/resources/templates 하위 폴더)
#spring.thymeleaf.prefix=classpath:/templates/

# 3-2) view 파일 확장자지정
#spring.thymeleaf.suffix=.html


# 4) 웹어플리케이션 서비스의 Port 지정
server.port=80




